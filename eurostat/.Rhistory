exp_df_list_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})
(for (i in 1:length(x)){ write_xlsx(x = x[[i]],
path = filename[[i]],
col_names = TRUE) })
}
#remove unneeded columns, then create month/year columns
eu_df <- data.16105648 %>%
select(-FLOW, -INDICATORS, -PERIOD_LAB, -PRODUCT_LAB) %>%
separate(PERIOD, into = c("year", "month"), sep =  4)
#create list of unique partners to see what to exclude
partner_df <- eu_df %>%
select(PARTNER, PARTNER_LAB) %>%
unique()
pt_to_remove <- c("WORLD",
"EU_INTRA",
"EU27_2020_INTRA",
"EU28_INTRA",
"EA19_INTRA",
"EUROZONE_INTRA",
"EU_EXTRA",
"EU27_2020_EXTRA",
"EU28_EXTRA",
"EA19_EXTRA",
"EUROZONE_EXTRA",
"GB")#UK data uploaded from UK trade info
eu_df_accepted_pt <- eu_df %>%
filter(PARTNER %notin% pt_to_remove)
#Recode EU codes to ICO (these are for non-designated iso codes)
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QY", "XF")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QZ", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "SX", "AN")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "AQ", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "BL", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "BV", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "GS", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "HM", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "IO", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "TF", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QR", "QQ")
#change reporter names (used later for creating files)
eu_df <- eu_df_accepted_pt
eu_df$REPORTER_LAB<- gsub("Belgium (incl. Luxembourg 'LU' -> 1998)", "Belgium",eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Germany (incl. German Democratic Republic 'DD' from 1991)", "Germany", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("France (incl. Saint BarthÃ©lemy 'BL' -> 2012; incl. French Guiana 'GF', Guadeloupe 'GP', Martinique 'MQ', RÃ©union 'RE' from 1997; incl. Mayotte 'YT' from 2014)", "France", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Italy (incl. San Marino 'SM' -> 1993)", "Italy", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Spain (incl. Canary Islands 'XB' from 1997)", "Spain", eu_df$REPORTER_LAB, fixed = TRUE)
#split out the quantity and value into own columns and remove rows with 0
eu_df2 <- eu_df %>%
pivot_wider(names_from = INDICATORS_LAB, values_from = INDICATOR_VALUE) %>%
filter(QUANTITY_IN_100KG > 0) %>%
select(-REPORTER)
#sum up new totals created by recoding
eu_df2 <-  eu_df2 %>%
group_by(REPORTER_LAB, PARTNER, PARTNER_LAB, PRODUCT, FLOW_LAB, year, month) %>%
mutate(volume = sum(QUANTITY_IN_100KG), value = sum(VALUE_IN_EUROS)) %>%
ungroup() %>%
select(-QUANTITY_IN_100KG, -VALUE_IN_EUROS)
#recode HS codes
eu_df2$PRODUCT <- as.character(eu_df2$PRODUCT)
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90111", "090111")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90121", "090121")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90122", "090122")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90112", "090112")
#add in columns needed for auto upload
eu_df2["wt_unit"] <- "100kg"
eu_df2["usd_val"] <- NA
colnames(eu_df2)
#remove eu aggregates if included (3 because space is ra)
eu_df2 <- eu_df2 %>%
select(month,
year,
PARTNER,
PARTNER_LAB,
volume,
wt_unit,
value,
usd_val,
PRODUCT,
reporter_name,
flow)
#remove eu aggregates if included (3 because space is ra)
eu_df2 <- eu_df2 %>%
select(month,
year,
PARTNER,
PARTNER_LAB,
volume,
wt_unit,
value,
usd_val,
PRODUCT,
REPORTER_LAB,
flow)
#remove eu aggregates if included (3 because space is ra)
eu_df2 <- eu_df2 %>%
select(month,
year,
PARTNER,
PARTNER_LAB,
volume,
wt_unit,
value,
usd_val,
PRODUCT,
REPORTER_LAB,
FLOW_LAB)
View(eu_df2)
#create new dfs of just re-exports and imports
eu_reExports <- eu_df2 %>%
filter(FLOW_LAB == "EXPORT") %>%
select(-FLOW_LAB)
eu_imports <- eu_df2 %>%
filter(FLOW_LAB == "IMPORT") %>%
select(-FLOW_LAB)
View(eu_imports)
#Split file by importing country for upload into db
ex_split <- split(eu_reExports, eu_reExports$REPORTER_LAB) %>%
lapply(function(y){
y$REPORTER_LAB <- NULL
y
})
im_split <- split(eu_imports, eu_imports$REPORTER_LAB) %>%
lapply(function(y){
y$REPORTER_LAB<- NULL
y
}
)
#export as excel files with country names
exp_df_list_excel(ex_split,
path = "D:/documents/R/output",
endname = "re-exports.xlsx")
#export as excel files with country names
exp_df_list_excel(ex_split,
path = "D:/documents/R/output",
endname = "re-exports.xlsx")
exp_df_list_excel(im_split,
path = "D:/documents/R/output",
endname = "imports.xlsx")
#funcion to export list of df to excel
exp_df_list_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})}
#export as excel files with country names
exp_df_list_excel(ex_split,
path = "D:/documents/R/output",
endname = "re-exports.xlsx")
length(ex_split)
filename<-list()
names(ex_split[1])
for (i in 1:length(ex_split)){
filename[i] <- paste0( "D:/documents/R/output/", names(ex_split[i]), "re-exports.xlsx", collapse = "")
}
filename <- list()
for (i in 1:length(ex_split)){
filename[i] <- paste0( "D:/documents/R/output/", names(ex_split[i]), "/re-exports.xlsx", collapse = "")
}
filename <- list()
for (i in 1:length(ex_split)){
filename[i] <- paste0( "D:/documents/R/output/", names(ex_split[i]), "_re-exports.xlsx", collapse = "")
}
for (i in 1:length(ex_split)){ write_xlsx(x = ex_split[[i]],
path = filename[[i]],
col_names = TRUE) }
#funcion to export list of df to excel
exp_df_list_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})}
exp_df_list_excel(im_split,
path = "D:/documents/R/output/",
endname = "_imports.xlsx")
filename <- list()
for (i in 1:length(im_split)){
filename[i] <- paste0( "D:/documents/R/output/", names(im_split[i]), "_imports.xlsx", collapse = "")
}
for (i in 1:length(im_split)){ write_xlsx(x = im_split[[i]],
path = filename[[i]],
col_names = TRUE) }
#see text file for instructions to download data set from eurostat comext
#should get a single csv file for up load
data.16105648 <- read.csv("D:/documents/R/eurostat/k16105648/data-16105648.csv")
#import file with ISO labels and country names
iso_names <- read.csv("D:/documents/GitHub/ico_scripts_Rstat/eurostat/EU_Country_labels.csv")
#function to minimize input for recoding ISO codes in gsub
recode_ptCode <- function(x, original, replace) {
gsub(original, replace, x, fixed = TRUE)
}
#funcion to export list of df to excel
write_list_to_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})
(for (i in 1:length(x)){ write_xlsx(x = x[[i]],
path = filename[[i]],
col_names = TRUE) })
}
`%notin%` <- Negate(`%in%`)
#remove unneeded columns, then create month/year columns
eu_df <- data.16105648 %>%
select(-FLOW, -INDICATORS, -PERIOD_LAB, -PRODUCT_LAB) %>%
separate(PERIOD, into = c("year", "month"), sep =  4)
#create list of unique partners to see what to exclude
partner_df <- eu_df %>%
select(PARTNER, PARTNER_LAB) %>%
unique()
pt_to_remove <- c("WORLD",
"EU_INTRA",
"EU27_2020_INTRA",
"EU28_INTRA",
"EA19_INTRA",
"EUROZONE_INTRA",
"EU_EXTRA",
"EU27_2020_EXTRA",
"EU28_EXTRA",
"EA19_EXTRA",
"EUROZONE_EXTRA",
"GB")#UK data uploaded from UK trade info
eu_df_accepted_pt <- eu_df %>%
filter(PARTNER %notin% pt_to_remove)
#Recode EU codes to ICO (these are for non-designated iso codes)
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QY", "XF")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QZ", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "SX", "AN")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "AQ", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "BL", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "BV", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "GS", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "HM", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "IO", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "TF", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QR", "QQ")
#change reporter names (used later for creating files)
eu_df <- eu_df_accepted_pt
eu_df$REPORTER_LAB<- gsub("Belgium (incl. Luxembourg 'LU' -> 1998)", "Belgium",eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Germany (incl. German Democratic Republic 'DD' from 1991)", "Germany", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("France (incl. Saint BarthÃ©lemy 'BL' -> 2012; incl. French Guiana 'GF', Guadeloupe 'GP', Martinique 'MQ', RÃ©union 'RE' from 1997; incl. Mayotte 'YT' from 2014)", "France", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Italy (incl. San Marino 'SM' -> 1993)", "Italy", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Spain (incl. Canary Islands 'XB' from 1997)", "Spain", eu_df$REPORTER_LAB, fixed = TRUE)
#split out the quantity and value into own columns and remove rows with 0
eu_df2 <- eu_df %>%
pivot_wider(names_from = INDICATORS_LAB, values_from = INDICATOR_VALUE) %>%
filter(QUANTITY_IN_100KG > 0) %>%
select(-REPORTER)
#sum up new totals created by recoding
eu_df2 <-  eu_df2 %>%
group_by(REPORTER_LAB, PARTNER, PARTNER_LAB, PRODUCT, FLOW_LAB, year, month) %>%
mutate(volume = sum(QUANTITY_IN_100KG), value = sum(VALUE_IN_EUROS)) %>%
ungroup() %>%
select(-QUANTITY_IN_100KG, -VALUE_IN_EUROS)
#recode HS codes
eu_df2$PRODUCT <- as.character(eu_df2$PRODUCT)
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90111", "090111")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90121", "090121")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90122", "090122")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90112", "090112")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "210112", "21011298")#this code won't take 6 digit only
#add in columns needed for auto upload
eu_df2["wt_unit"] <- "100kg"
eu_df2["usd_val"] <- NA
#remove eu aggregates if included (3 because space is ra)
eu_df2 <- eu_df2 %>%
select(month,
year,
PARTNER,
PARTNER_LAB,
volume,
wt_unit,
value,
usd_val,
PRODUCT,
REPORTER_LAB,
FLOW_LAB)
#create new dfs of just re-exports and imports
eu_reExports <- eu_df2 %>%
filter(FLOW_LAB == "EXPORT") %>%
select(-FLOW_LAB)
eu_imports <- eu_df2 %>%
filter(FLOW_LAB == "IMPORT") %>%
select(-FLOW_LAB)
#Split file by importing country for upload into db
ex_split <- split(eu_reExports, eu_reExports$REPORTER_LAB) %>%
lapply(function(y){
y$REPORTER_LAB <- NULL
y
})
im_split <- split(eu_imports, eu_imports$REPORTER_LAB) %>%
lapply(function(y){
y$REPORTER_LAB<- NULL
y
}
)
#export as excel files with country names
exp_df_list_excel(ex_split,
path = "D:/documents/R/output/",
endname = "_re-exports.xlsx")
#export as excel files with country names
write_list_to_excel(ex_split,
path = "D:/documents/R/output/",
endname = "_re-exports.xlsx")
#funcion to export list of df to excel
write_list_to_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})
(for (i in 1:length(x)){ write_xlsx(x = x[[i]],
path = filename[[i]],
col_names = TRUE) })
print("Done")
}
write_list_to_excel(im_split,
path = "D:/documents/R/output/",
endname = "_imports.xlsx")
#see text file for instructions to download data set from eurostat comext
#should get a single csv file for up load
data.16105648 <- read.csv("D:/documents/R/eurostat/k16105648/data-16105648.csv")
#import file with ISO labels and country names
iso_names <- read.csv("D:/documents/GitHub/ico_scripts_Rstat/eurostat/EU_Country_labels.csv")
#function to minimize input for recoding ISO codes in gsub
recode_ptCode <- function(x, original, replace) {
gsub(original, replace, x, fixed = TRUE)
}
#funcion to export list of df to excel
write_list_to_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})
(for (i in 1:length(x)){ write_xlsx(x = x[[i]],
path = filename[[i]],
col_names = TRUE) })
print("Done")
}
`%notin%` <- Negate(`%in%`)
#remove unneeded columns, then create month/year columns
eu_df <- data.16105648 %>%
select(-FLOW, -INDICATORS, -PERIOD_LAB, -PRODUCT_LAB) %>%
separate(PERIOD, into = c("year", "month"), sep =  4)
#create list of unique partners to see what to exclude
partner_df <- eu_df %>%
select(PARTNER, PARTNER_LAB) %>%
unique()
pt_to_remove <- c("WORLD",
"EU_INTRA",
"EU27_2020_INTRA",
"EU28_INTRA",
"EA19_INTRA",
"EUROZONE_INTRA",
"EU_EXTRA",
"EU27_2020_EXTRA",
"EU28_EXTRA",
"EA19_EXTRA",
"EUROZONE_EXTRA")
eu_df_accepted_pt <- eu_df %>%
filter(PARTNER %notin% pt_to_remove) %>%
filter(REPORTER != "GB")
#Recode EU codes to ICO (these are for non-designated iso codes)
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QY", "XF")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QZ", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "SX", "AN")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "AQ", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "BL", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "BV", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "GS", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "HM", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "IO", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "TF", "QU")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "QR", "QQ")
eu_df_accepted_pt$PARTNER <- recode_ptCode(eu_df_accepted_pt$PARTNER, "XS", "RS")
#change reporter names (used later for creating files)
eu_df <- eu_df_accepted_pt
eu_df$REPORTER_LAB<- gsub("Belgium (incl. Luxembourg 'LU' -> 1998)", "Belgium",eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Germany (incl. German Democratic Republic 'DD' from 1991)", "Germany", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("France (incl. Saint BarthÃ©lemy 'BL' -> 2012; incl. French Guiana 'GF', Guadeloupe 'GP', Martinique 'MQ', RÃ©union 'RE' from 1997; incl. Mayotte 'YT' from 2014)", "France", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Italy (incl. San Marino 'SM' -> 1993)", "Italy", eu_df$REPORTER_LAB, fixed = TRUE)
eu_df$REPORTER_LAB <- gsub("Spain (incl. Canary Islands 'XB' from 1997)", "Spain", eu_df$REPORTER_LAB, fixed = TRUE)
#split out the quantity and value into own columns and remove rows with 0
eu_df2 <- eu_df %>%
pivot_wider(names_from = INDICATORS_LAB, values_from = INDICATOR_VALUE) %>%
filter(QUANTITY_IN_100KG > 0) %>%
select(-REPORTER)
#sum up new totals created by recoding
eu_df2 <-  eu_df2 %>%
group_by(REPORTER_LAB, PARTNER, PARTNER_LAB, PRODUCT, FLOW_LAB, year, month) %>%
mutate(volume = sum(QUANTITY_IN_100KG), value = sum(VALUE_IN_EUROS)) %>%
ungroup() %>%
select(-QUANTITY_IN_100KG, -VALUE_IN_EUROS)
#recode HS codes
eu_df2$PRODUCT <- as.character(eu_df2$PRODUCT)
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90111", "090111")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90121", "090121")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90122", "090122")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "90112", "090112")
eu_df2$PRODUCT<- recode_ptCode( eu_df2$PRODUCT, "210112", "21011298")#this code won't take 6 digit only
#add in columns needed for auto upload
eu_df2["wt_unit"] <- "100kg"
eu_df2["usd_val"] <- NA
#remove eu aggregates if included (3 because space is ra)
eu_df2 <- eu_df2 %>%
select(month,
year,
PARTNER,
PARTNER_LAB,
volume,
wt_unit,
value,
usd_val,
PRODUCT,
REPORTER_LAB,
FLOW_LAB)
#create new dfs of just re-exports and imports
eu_reExports <- eu_df2 %>%
filter(FLOW_LAB == "EXPORT") %>%
select(-FLOW_LAB)
eu_imports <- eu_df2 %>%
filter(FLOW_LAB == "IMPORT") %>%
select(-FLOW_LAB)
#Split file by importing country for upload into db
ex_split <- split(eu_reExports, eu_reExports$REPORTER_LAB) %>%
lapply(function(y){
y$REPORTER_LAB <- NULL
y
})
im_split <- split(eu_imports, eu_imports$REPORTER_LAB) %>%
lapply(function(y){
y$REPORTER_LAB<- NULL
y
}
)
#export as excel files with country names
write_list_to_excel(ex_split,
path = "D:/documents/R/output/",
endname = "_re-exports.xlsx")
write_list_to_excel(im_split,
path = "D:/documents/R/output/",
endname = "_imports.xlsx")
#excel original cleaned to rid file of the table of contents
#also to delete rows with data downloaded and link back to the TOC. All else same
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X, col_names = FALSE, skip = 1))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
#function adapted from mgsub to allow for multiple patterns/replacement
#requires one to one match
recode_value <- function(x, original, replace) {
result <- x
for (i in 1:length(original)){
result <- gsub(original[i], replace[i], result, fixed = TRUE)
}
result
}
#funcion export list of df to excel
exp_df_list_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})
(for (i in 1:length(x)){ write_xlsx(x = x[[i]],
path = filename[[i]],
col_names = TRUE) })
}
workbook_location <- "C:/Users/TRAVEL/Documents/R/raw_data/k15805264_toc_removed.xlsx"
#import data workbook and excel file with ISO labels
EU_data <- read_excel_allsheets(workbook_location)
workbook_location <- "D:/documents/R/eurostat/k16105648/data-16105648.csv"
#import data workbook and excel file with ISO labels
EU_data <- read_excel_allsheets(workbook_location)
#function adapted from mgsub to allow for multiple patterns/replacement
#requires one to one match
recode_value <- function(x, original, replace) {
result <- x
for (i in 1:length(original)){
result <- gsub(original[i], replace[i], result, fixed = TRUE)
}
result
}
#funcion export list of df to excel
exp_df_list_excel <- function(x, path, endname = ".xlsx"){
filename <- list()
(for (i in 1:length(x)){
filename[i] <- paste0( path, names(x[i]), endname, collapse = "")
})
(for (i in 1:length(x)){ write_xlsx(x = x[[i]],
path = filename[[i]],
col_names = TRUE) })
}
workbook_location <- "D:/documents/R/eurostat/k16105648/data-16105648.csv"
#import data workbook and excel file with ISO labels
EU_data <- read.csv(workbook_location, header = TRUE)
View(EU_data)
#import data workbook and excel file with ISO labels
(EU_data <- read.csv(workbook_location, header = TRUE))
ico_Country <- read_excel("R/raw_data/ico_Country_Codes_Names.xlsx")
ico_Country <- read_excel("D:/documents/R/raw_data/ico_Country_Codes_Names.xlsx")
#pulls out info from header section of each work sheet (partner name, hscode, flow type and unit)
#then removes the header rows
EU_data_cleaned <- lapply(EU_data, function(x) transform(x, flow = x[1,2])) %>%
lapply(function(x) transform(x, unit = x[2,2])) %>%
lapply(function(x) transform(x, period = x[3,2])) %>%
lapply(function(x) transform(x, hsCode = x[4,2])) %>%
lapply(function(x) subset(x[-c(1:5), ]))
